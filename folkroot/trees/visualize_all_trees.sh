: '
BSD 2-Clause License

Copyright (c) 2025, Hilda Romero-Velo
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'

: '
 # Created by Hilda Romero-Velo on March 2025.
'

: '
 # This script is used to visualize all trees generated by the tree generation script.
 # It uses the visualize_tree.py script to generate PDF visualizations of the trees.
 # The script processes trees by level and weighting, and saves the PDFs to a directory.
'
#!/bin/bash

script_dir=$(dirname "$(realpath "$0")")

PYTHON_CMD="python3"
SCRIPT_PATH="$script_dir/visualize_tree.py"
TREES_BASE_DIR="$script_dir/generated_trees"

PDF_BASE_DIR="$script_dir/tree_visualizations_pdf"
mkdir -p "$PDF_BASE_DIR"

debug_log="$PDF_BASE_DIR/tree_visualization.log"

LEVELS=("note_level" "structure_level" "shared_segments_level" "combined_level")
WEIGHTS=("s25_ss75" "s50_ss50" "s75_ss25")

visualize_tree() {
    local tree_file=$1
    local base_name
    local dir_name=$(dirname "$tree_file")

    # Extract the directory structure
    local rel_path=${dir_name#$TREES_BASE_DIR/}
    local dirs=(${rel_path//\// })

    # Determine output directory based on tree location
    if [[ "${dirs[0]}" == "combined_level" ]]; then
        # For combined level, include the weighting subdirectory
        local weight_dir="${dirs[1]}" # e.g. s50_ss50
        output_dir="$PDF_BASE_DIR/combined_level/$weight_dir"
    else
        # For other levels, use the main level directory
        output_dir="$PDF_BASE_DIR/${dirs[0]}"
    fi

    mkdir -p "$output_dir"
    base_name=$(basename "$tree_file" .nexus)
    local output_pdf="$output_dir/${base_name}.pdf"

    # Build and execute command
    local cmd="$PYTHON_CMD $SCRIPT_PATH --tree \"$tree_file\" --output \"$output_pdf\""
    eval $cmd >>"$debug_log" 2>&1

    if [ -f "$output_pdf" ]; then
        ((successful_trees++))
    else
        ((failed_trees++))
        echo "Failed to generate PDF for: $tree_file" >>"$debug_log"
    fi
}

# Initialize counters
successful_trees=0
failed_trees=0
total_trees=0

# Process trees by level
for level in "${LEVELS[@]}"; do
    echo -e "\nProcessing $level..."

    if [ "$level" == "combined_level" ]; then
        for weight in "${WEIGHTS[@]}"; do
            echo "  Processing $weight..."

            tree_files=$(find "$TREES_BASE_DIR/${level}_${weight}" -type f -name "*.nexus" 2>/dev/null)

            for tree_file in $tree_files; do
                ((total_trees++))
                visualize_tree "$tree_file"
                echo -ne "\rProcessed $total_trees trees (Success: $successful_trees, Failed: $failed_trees)"
            done
        done
    else
        tree_files=$(find "$TREES_BASE_DIR/$level" -type f -name "*.nexus" -not -path "*/\.*" 2>/dev/null)

        for tree_file in $tree_files; do
            ((total_trees++))
            visualize_tree "$tree_file"
            echo -ne "\rProcessed $total_trees trees (Success: $successful_trees, Failed: $failed_trees)"
        done
    fi
done

echo -e "\n\nTrees visualization complete."
echo "Total trees processed: $total_trees"
echo "Successful: $successful_trees"
echo "Failed: $failed_trees"
echo "PDFs saved to: $PDF_BASE_DIR"
